#!/bin/bash
set -euo pipefail

# Reads either a value or a list from the given env prefix
function prefix_read_list() {
  local prefix="BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PULL_REQUEST_ID_FROM_$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

if [[ "${BUILDKITE_PIPELINE_PROVIDER:-}" != "github" ]] ; then
  echo "‚õîÔ∏è  this plugin can only be used on piplines associated with github repositories" >&2
  exit 1
fi

# If the build is not tied to a pull request, try and extract the PR number if configuration to do so has been provided
if [[ "${BUILDKITE_PULL_REQUEST:-false}" == "false" ]] ; then

  # If there is a pattern(s) and source configured, try to extract the PR number
  if [[ -n "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PULL_REQUEST_ID_FROM:-}" ]]; then
    echo "‚ö†Ô∏è  this doesn't appear to be a PR-build, but a PR number pattern is configured" >&2

    patternValue="$(prefix_read_list "PATTERN")"
    source=\""${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PULL_REQUEST_ID_FROM_SOURCE}"\" # Wrap in quotes here to prevent issues when using eval

    # If patternValue is an array of patterns, chain grep commands together for each
    if [[ $(declare -p "${patternValue}") =~ "declare -a" ]]; then
      patternString=""
      for p in "${patternValue[@]}"; do
        patternString+=" | grep -oE '${p}'"
      done
    else
      # Otherwise just use the single pattern
      patternString=" | grep -oE '${patternValue}'"
    fi

    pullReqNo=$(eval echo "${source}" "${patternString}")
  fi

  # Otherwise, we can't do anything so exit
  echo "‚ö†Ô∏è  this doesn't appear to be a PR-build, skipping plugin execution" >&2
  exit 0

else
  # For builds tied to a pull request, use the provided pull request number variable
  pullReqNo="${BUILDKITE_PULL_REQUEST}"
fi


repoFq=""
if [[ "${BUILDKITE_REPO:-}" =~ github.com[:/](.*).git[/]? ]]; then
  repoFq="${BASH_REMATCH[1]}"
else
  echo "‚õîÔ∏è  the BUILDKITE_REPO variable has an unexpected format" >&2
  exit 2
fi

githubToken=""
if [[ -n "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_TOKEN_FROM_FILE:-}" ]]; then
  echo "~~~ üìã reading github token from file"
  githubToken=$(cat "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_TOKEN_FROM_FILE}")
elif [[ -n "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_TOKEN_FROM_ENV:-}" ]]; then
  echo "~~~ üìã reading github token from env var"
  githubToken="${!BUILDKITE_PLUGIN_GITHUB_PR_LABELS_TOKEN_FROM_ENV}"
else
  echo "‚ö†Ô∏è  configuration is missing a valid 'token-from' stanza. requests to github will be unauthenticated"
fi

echo "~~~ :github: retrieving pull-request labels"
jqFilter='[.labels[].name] | join(",")'
if [[ -z "${githubToken}" ]]; then
  labels=$(curl -f -Ss "https://api.github.com/repos/${repoFq}/pulls/${pullReqNo}" | jq -r "$jqFilter" -)
else
  labels=$(curl -f -Ss -H @- "https://api.github.com/repos/${repoFq}/pulls/${pullReqNo}" <<<"Authorization: Bearer ${githubToken}" | jq -r "$jqFilter" -)
fi

if [[ -z "${labels}" ]]; then
  echo "~~~ :github: PR #${pullReqNo} has no labels"
  exit 0
else
  echo "~~~ :github: PR #${pullReqNo} has the following labels: ${labels}"
fi

if [[ -n "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PUBLISH_METADATA_KEY:-}" ]]; then
  metaDataKey="${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PUBLISH_METADATA_KEY}"
  echo "~~~ :buildkite: publishing labels as meta-data key '${metaDataKey}'"
  buildkite-agent meta-data set "${metaDataKey}" "${labels}"
fi

if [[ -n "${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PUBLISH_ENV_VAR:-}" ]]; then
  envVarName="${BUILDKITE_PLUGIN_GITHUB_PR_LABELS_PUBLISH_ENV_VAR}"
  echo "~~~ :buildkite: publishing labels as env var '${envVarName}'"
  declare -x "${envVarName}"="${labels}"
fi
